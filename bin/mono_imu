#!/usr/bin/env python
import os
import sys
import re


def yield_success(matches):
    matches = [match for match in matches if match is not None]
    return matches[0] if len(matches) > 0 else None


def parse_nodename(argv):
    matches = [re.match(r"__name\s*:=\s*(?P<name>.+)", arg) for arg in argv]
    match = yield_success(matches)
    return (
        match.group("name") if match else None,
        [arg for (arg, match) in zip(argv, matches) if match is None],
    )


def hijack_nodename_argv(argv):
    argv_original = [arg for arg in argv]
    nodename_original, argv_else = parse_nodename(argv_original[1:])
    argv_new_nodename = (
        []
        if nodename_original is None
        else ["__name:={}".format(nodename_original + "__launcher")]
    )

    argv_nodename_hijacked = argv_original[0:1] + argv_new_nodename + argv_else
    return argv_original, argv_nodename_hijacked


argv_original, argv_hijacked = hijack_nodename_argv(sys.argv)
sys.argv = argv_hijacked

import rospy
import docker


def maybe_get_namespace():
    if "ROS_NAMESPACE" in os.environ:
        return os.environ["ROS_NAMESPACE"]
    return None


def get_mounts():
    if not rospy.has_param("~mounts"):
        return None

    mounts = rospy.get_param("~mounts")
    if not isinstance(mounts, str):
        rospy.logerr("Mount directory should be provided as a single string.")
        rospy.logerr("Instead got: {}".format(type(mounts)))
        return None

    mount_pattern = r"\s*[^(\0|:)]+\s*:\s*[^(\0|:)]+(\s*:\s*(rw|ro)\s*)?"
    mounts_pattern = r"^({mount},)*{mount}$".format(mount=mount_pattern)
    if not re.match(mounts_pattern, mounts):
        rospy.logerr(
            " ".join(
                [
                    "Mount directory should be provided in a comma-separated list of",
                    "host_path:container_path(:(rw|ro))?",
                ]
            )
        )
        return None

    def make_mount_volume(mount_repr):
        splits = [split.strip() for split in mount_repr.split(":")]
        host_path = splits[0]
        container_path = splits[1]

        if len(splits) == 2:
            mount_mode = "rw"
        else:
            mount_mode = splits[2]

        return host_path, {"bind": container_path, "mode": mount_mode}

    return dict([make_mount_volume(mount) for mount in mounts.split(",")])


def parse_log_path(argv):
    matches = [re.match(r"__log\s*:=\s*(?P<log>.+)", arg) for arg in argv]
    match = yield_success(matches)
    return (
        match.group("log") if match else None,
        [arg for (arg, match) in zip(argv, matches) if match is None],
    )


def make_container_argv(argv):
    _, argv = parse_log_path(argv[1:])
    return argv


def run_container(client, namespace, argv, mounts):
    image = "orbslam3-docker-app"
    binpath = "/catkin_ws/orbslam3_docker_ros/mono_imu__containerized"
    return client.containers.run(
        image,
        command=[binpath] + argv,
        auto_remove=True,
        network="host",
        volumes=mounts,
        environment={} if namespace is None else {"ROS_NAMESPACE": namespace},
        detach=True,
        init=True,
    )


def shutdown(container):
    container.stop(timeout=5)


def main():
    rospy.init_node("mono_imu")

    namespace = maybe_get_namespace()
    argv = make_container_argv(argv_original)

    mounts = get_mounts()
    rospy.loginfo("mounts: {}".format(mounts))

    client = docker.from_env()
    container = run_container(client, namespace, argv, mounts)
    logs = container.logs(stream=True, follow=True)

    rospy.on_shutdown(lambda: shutdown(container))
    for log in logs:
        rospy.loginfo(log.strip())


if __name__ == "__main__":
    main()
